{
  "hash": "de26b450d6ecb8614d2496f81d90e5e2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Setup\n---\n\n\n## Functions\nThese functions are sourced from `XX_functions.R`\n\n::: {.cell}\n\n```{.r .cell-code}\ncalc_dates <- function(x) {\n  x |>\n    summarize(p05y1 = 0.05 * max(count_sum),\n              p05x = doy[count_sum >= p05y1][1],\n              p05y = count[count_sum >= p05y1][1],\n              \n              p25y1 = 0.25 * max(count_sum),\n              p25x = doy[count_sum >= p25y1][1],\n              p25y = count[count_sum >= p25y1][1],\n              \n              p50y1 = 0.5 * max(count_sum),\n              p50x = doy[count_sum >= p50y1][1],\n              p50y = count[count_sum >= p50y1][1],\n              \n              p75y1 = 0.75 * max(count_sum),\n              p75x = doy[count_sum >= p75y1][1],\n              p75y = count[count_sum >= p75y1][1],\n              \n              p95y1 = 0.95 * max(count_sum),\n              p95x = doy[count_sum >= p95y1][1],\n              p95y = count[count_sum >= p95y1][1]) |>\n    pivot_longer(-any_of(\"year\"), names_to = c(\"perc\", \"dim\"), names_sep = 3) |>\n    pivot_wider(names_from = \"dim\") |>\n    rename(\"doy_passage\" = \"x\", \"count_thresh\" = \"y1\", \"count_pred\" = \"y\")\n}\n\nplot_model <- function(raw, pred, final = NULL) {\n  ymax <- max(c(raw$count, pred$ci99_upper), na.rm = TRUE)\n  \n  g <- ggplot(data = pred, mapping = aes(x = doy, y = count)) +\n    theme_bw() +\n    geom_ribbon(aes(ymin = ci99_lower, ymax = ci99_upper), fill = \"grey50\", alpha = 0.5) +\n    geom_point(data = raw, na.rm = TRUE) +\n    geom_line() +\n    scale_x_continuous(name = \"Day of Year\", limits = c(203, 295)) +\n    labs(y = \"Count\")\n  \n  if(!is.null(final)) g <- g + annotate(geom = \"text\", x = -Inf, y = +Inf, hjust = -0.1, vjust = 1.1, label = paste0(\"n days = \", final$n_dates_obs))\n  g\n}\n\nplot_cum <- function(d_sum, dts) {\n  ggplot(data = d_sum, aes(x = doy, y = count_sum)) +\n    theme_bw() +\n    geom_bar(stat = \"identity\") +\n    geom_hline(yintercept = c(0.05, 0.25, 0.5, 0.75, 0.95) * max(d_sum$count_sum, na.rm = TRUE), \n               linetype = \"dotted\") +\n    geom_point(data = dts, aes(x = doy_passage, y = count_thresh), colour = \"red\", size = 3) +\n    scale_x_continuous(name = \"Day of Year\", limits = c(203, 295)) +\n    labs(y = \"Cumulative count\")\n}\n\nplot_model_explore <- function(d_raw, d_pred, dts, residents, resident_date) {\n  ymax <- max(c(d_raw$count, d_pred$ci99_upper), na.rm = TRUE)\n  \n  ggplot(data = d_pred, mapping = aes(x = doy, y = count)) +\n    theme_bw() +\n    annotate(geom = \"rect\", xmin = dts$doy_passage[1], xmax = dts$doy_passage[5], ymin = 0, ymax = Inf, \n             colour = NA, fill = \"red\", alpha = 0.1) +\n    annotate(geom = \"rect\", xmin = dts$doy_passage[2], xmax = dts$doy_passage[4], ymin = 0, ymax = Inf, \n             colour = NA, fill = \"red\", alpha = 0.3) +\n    annotate(geom = \"text\", \n             x = dts$doy_passage[1] * 1.015, y = ymax * 0.9,\n             label = \"5%-95%\") +\n    annotate(geom = \"text\", \n             x = dts$doy_passage[2] + (dts$doy_passage[4] - dts$doy_passage[2])/2, y = ymax * 0.9,\n             label = \"25%-75%\") +\n    geom_ribbon(aes(ymin = ci99_lower, ymax = ci99_upper), fill = \"grey50\", alpha = 0.5) +\n    geom_point(data = d_raw, na.rm = TRUE) +\n    geom_line() +\n    geom_point(data = dts, aes(x = doy_passage, y = count_pred), colour = \"red\", size = 3) +\n    annotate(geom = \"segment\", x = min(d_pred$doy), xend = resident_date, \n             y = 50, yend = 50, \n             arrow = arrow(ends = \"both\", length = unit(2, \"mm\"))) +\n    annotate(geom = \"text\", label = \"Resident Count\", fontface = \"bold\", \n             x = 220, y = max(d_raw$count, na.rm = TRUE) * 0.85,\n             hjust = \"left\", vjust = \"top\") +\n    annotate(geom = \"text\", \n             label = glue::glue_data(\n               residents, \n               \"min: {res_pop_min}\\nmax: {res_pop_max}\\nmedian: {res_pop_median}\\nmean: {res_pop_mean}\"), \n             hjust = \"left\", vjust = \"top\", x = 220, y = max(d_raw$count, na.rm = TRUE)*0.7)  +\n    scale_x_continuous(name = \"Day of Year\", limits = c(203, 295)) +\n    labs(y = \"Count\")\n}\n\nplot_cum_explore <- function(d_sum, dts) {\n  ggplot(data = d_sum, aes(x = doy, y = count_sum)) +\n    theme_bw() +\n    geom_bar(stat = \"identity\") +\n    geom_hline(yintercept = c(0.05, 0.25, 0.5, 0.75, 0.95) * max(d_sum$count_sum, na.rm = TRUE), \n               linetype = \"dotted\") +\n    geom_point(data = dts, aes(x = doy_passage, y = count_thresh), colour = \"red\", size = 3) +\n    scale_x_continuous(name = \"Day of Year\", limits = c(203, 295)) +\n    labs(y = \"Cumulative count\")\n}\n\ngam_check <- function(g, year) {\n  \n  if(!dir.exists(d <- \"Figures/GAM checks/\")) dir.create(d, recursive = TRUE)\n  f <- file.path(d, paste0(\"gam_check_\", year, \".png\"))\n  png(file = f, width = 1000, height = 400, res = 100)\n  p0 <- par(mfrow = c(2,2), mar = c(2,2,2,2))\n  o <- capture.output(gam.check(g, k.rep = 1000))\n  par(p0)\n  dev.off()\n  \n  t <- str_split(o[12:13], \" +\", simplify = TRUE)\n  t <- t[, -6]\n  t[1,1] <- \"param\"\n  colnames(t) <- as.vector(t[1,])\n  t <- as_tibble(t)\n  t <- slice(t, -1) |>\n    mutate(convergence = str_subset(o, \"convergence\"),\n           full_convergence = str_detect(convergence, \"full\")) |>\n    janitor::clean_names()\n  \n  list(plot = f, checks = t)\n}\n\nlm_coefs <- function(x) {\n  bind_cols(model = as.character(x$call)[2], \n            tidy(x),\n            select(glance(x), n = nobs, contains(\"r.squ\"), \n                   model_f = statistic, model_p = p.value))\n}\n\nglm_coefs <- function(x) {\n  bind_cols(model = as.character(x$call)[2], \n            tidy(x),\n            select(glance(x), n = nobs)) |>\n    mutate(estimate_exp = exp(estimate)) |>\n    relocate(estimate_exp, .after = estimate)\n}\n\nget_table <- function(models) {\n  if(inherits(models[[1]], \"glm\")) f <- glm_coefs else f <- lm_coefs\n  map(models, f) |>\n    bind_rows() |>\n    rename_with(\\(x) str_replace_all(x, \"\\\\.\", \"_\")) |>\n    rename_with(\\(x) str_replace(x, \"^(r_|adj_r)\", \"model_\\\\1\")) \n}\n\nfmt_table <- function(t) {\n  ft <- t |>\n    mutate(\n      #model_p = round(model_p, 3),\n      #model_p = if_else(model_p <= 0.05, paste0(\"<strong>\", model_p, \"</strong>\"), as.character(model_p)),\n      row_group = md(paste0(\"<strong>\", model, \"</strong>\")))\n  \n  if(\"model_r_squared\" %in% names(t)) {\n    ft <- ft |>\n      mutate(row_group = md(paste0(row_group, \n                                   \" <small>(\",\n                                   #\"<br><small>(F = \", round(model_f, 2), \"; \",\n                                   #\"P = \", model_p, \"; \",\n                                   \"R2 = \", round(model_r_squared, 2), \"; \",\n                                   \"R2-adj = \", round(model_adj_r_squared, 2), \n                                   \")</small>\")))\n  }\n  \n  ft |> \n    select(-starts_with(\"model\")) |>\n    group_by(row_group) |>\n    rename_with(\\(x) str_replace_all(x, \"\\\\.|\\\\_\", \" \")) |>\n    gt() |>\n    gt_theme() |>\n    tab_style(cell_text(transform = \"capitalize\", weight = \"bold\"), \n              locations = cells_column_labels()) |>\n    text_transform(locations = cells_row_groups(), fn = \\(x) map(x, html)) |>\n    fmt_number(columns = -1, decimals = 3) |>\n    fmt_number(columns = any_of(c(\"n\", \"df\")), decimals = 0) |>\n    tab_style(style = cell_text(weight = \"bold\"), \n              locations = cells_body(\n                columns = `p value`, rows = `p value` <= 0.05))\n}\n\ngt_theme <- function(data, ...) {\n  data |>\n    tab_options(\n      table.border.top.width = px(3), \n      table.width = \"80%\",\n      column_labels.font.weight = \"bold\",\n      column_labels.border.bottom.width = px(3),\n      data_row.padding = px(7),\n      ...\n    )\n}\n\ngt_cooks <- function(cooks, width = \"40%\") {\n  col <- names(cooks)[-1]\n  g <- gt(cooks) |>\n    fmt_number(-\"year\", decimals = 2)\n  \n  for(i in col) {\n    g <- tab_style(g, style = list(cell_fill(color = \"#F9E3D6\")),\n                   cells_body(columns = contains(i), \n                              rows = .data[[i]] > 4/25))\n  }\n\n  g |>\n    gt_theme() |>\n    tab_header(\"Cook's Distances\") |>\n    tab_options(table.width = width)\n}\n\n\nget_cooks <- function(models) {\n  cbind(\n    year = v$year,\n    map(models, \\(x) {\n      data.frame(cooks = cooks.distance(x)) |>\n        rename_with(~ str_remove(as.character(x$call)[2], \" ~ year\"))\n    }) |>list_cbind()\n  )\n}\n\ncompare <- function(model, y) {\n  \n  pal <- RColorBrewer::brewer.pal(n = 9, \"Greens\")[-c(1,2,3,9)]\n  \n  m <- paste0(c(\"Original - \", paste0(\"Drop \", y, \" - \")), \n              str_remove(as.character(model$call)[2], \" ~ year\"))\n  c <- rbind(\n    as.data.frame(coef(summary(model)))|>\n      rownames_to_column(\"parameter\"),\n    as.data.frame(coef(summary(update(model, data = filter(v, year != y))))) |>\n      rownames_to_column(\"parameter\")\n  ) |>\n    mutate(across(-\"parameter\", \\(x) round(x, digits = 3)))\n  cbind(model = sort(rep(m, nrow(c)/2), decreasing = TRUE), c) |>\n    arrange(parameter) |>\n    gt() |>\n    gt_theme() |>\n    data_color(columns = matches(\"Estimate\"),\n               rows = c(last_col() - 1, last_col()),\n               palette = pal, reverse = c$Estimate[nrow(c)] < 0) |>\n    data_color(columns = matches(\"Pr\"),\n               rows = c(last_col() - 1, last_col()), reverse = TRUE,\n               palette = pal)\n}\n\n\n\nmodel_check_figs <- function(models) {\n  for(i in models) {\n    p0 <- par(mar = c(4, 4, 4, 0))\n    t <- as.character(i$call)[2]\n    simulateResiduals(i, plot = TRUE)\n    mtext(t, line = 1, at = -0.1)\n    par(p0)\n  }\n}\n\ndesc_stats <- function(data) {\n  data |>\n    pivot_longer(cols = everything(), names_to = \"measure\") |>\n    summarize(mean = mean(value), \n              sd = sd(value),\n              min = min(value),\n              median = median(value),\n              max = max(value),\n              n = n(),\n              .by = \"measure\") |>\n    gt() |>\n    gt_theme() |>\n    fmt_number(columns = c(mean, sd), decimals = 2)\n}\n  \nfmt_anova <- function(m) {\n  car::Anova(m, type = \"III\") |>\n    as_tibble(rownames = \"Parameter\") |>\n    rename(\"P\" = \"Pr(>F)\", \"F\" = \"F value\") |>\n    gt() |>\n    tab_style(style = cell_text(weight = \"bold\"), \n              locations = cells_body(\n                columns = P, rows = P <= 0.05)) |>\n    fmt_number(columns = -Df, decimals = 3)\n}\n\nfmt_summary <- function(m) {\n  summary(m) |>\n    coef() |> \n    as_tibble(rownames = \"Parameter\") |>\n    rename(\"P\" = starts_with(\"Pr\"),\n           \"T\" = any_of(\"t value\"),\n           \"Z\" = any_of(\"z value\")) |>\n    gt() |>\n    tab_style(style = cell_text(weight = \"bold\"), \n              locations = cells_body(\n                columns = P, rows = P <= 0.05)) |>\n    fmt_number(decimals = 3)\n}\n\nfmt_emmeans <- function(m, adjust = \"FDR\") {\n  emmeans::emtrends(m, ~ measure, var = \"year\") |> \n    emmeans::test(adjust = adjust) |>\n    as_tibble() |>\n    rename(slope = year.trend, P = p.value, `T` = t.ratio) |>\n    rename_with(tools::toTitleCase) |>\n    gt() |>\n    tab_style(style = cell_text(weight = \"bold\"), \n              locations = cells_body(\n                columns = P, rows = P <= 0.05)) |>\n    fmt_number(columns = -Df, decimals = 3) |>\n    tab_footnote(paste0(adjust, \" P-value adjustment\"))\n}\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}